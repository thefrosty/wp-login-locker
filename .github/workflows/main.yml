name: Main PHP Version(s) CI

on:
  push:
    branches:
      - develop
  pull_request:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: [ 7.4, 8.0, 8.1 ]
        coverage: [ true ]
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # No shallow clone, we need all history!

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: xdebug
          tools: composer, cs2pr, phpunit

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: php-${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer update --prefer-dist --no-interaction

      - name: Create all branches
        run: source ./vendor/thefrosty/wp-utilities/bin/create-all-branches.sh

      - name: Run composer tests
        continue-on-error: true
        run: |
          ./bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:${{ job.services.mysql.ports['3306'] }} latest true
          composer tests

      - name: Show PHPCS results in PR
        run: cs2pr ./phpcs-report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  Build:
    name: Build and Upload Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Release Version env
        run: |
          VERSION=${{ github.event.release.tag_name }}
          echo "Release Version: ${VERSION//v}"
          echo "RELEASE_VERSION=${VERSION//v}" >> $GITHUB_ENV

      # see https://github.com/shivammathur/setup-php
      - name: Use PHP 7.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          coverage: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build project for production
        run: |
          echo "Release Version: ${{ github.event.release.tag_name }}"
          composer update --no-dev --optimize-autoloader
          mkdir build

      - name: Create artifact
        uses: montudor/action-zip@v0.1.1
        with:
          args: zip -X -r build/wp-login-locker.zip . -x *.git* bin** node_modules/\* .* "*/\.*" *.dist *.xml composer.* package*.json tests** build**

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: wp-login-locker
          path: build/wp-login-locker.zip

      - name: Upload to release
        uses: JasonEtco/upload-to-release@master
        with:
          args: build/wp-login-locker.zip application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token

      - name: Duplicate asset for GitHub Updater
        # @see https://github.com/afragen/github-updater/wiki/Settings#release-assets
        uses: montudor/action-zip@v0.1.1
        with:
          args: zip -X -r build/wp-login-locker-${{ env.RELEASE_VERSION }}.zip . -x *.git* bin** node_modules/\* .* "*/\.*" *.dist *.xml composer.* package*.json tests** build**

      - name: Upload duplicate to release
        uses: JasonEtco/upload-to-release@master
        with:
          args: build/wp-login-locker-${{ env.RELEASE_VERSION }}.zip application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
